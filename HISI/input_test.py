import numpy as np
import matplotlib.pylab as plt


def exemple_pool():
    return np.array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.]])


def square_3x3():
    return np.array([
        [0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0],
        [0,0,1.,1.,1.,0,0],
        [0,0,1.,1.,1.,0,0],
        [0,0,1,1,1,0,0],
        [0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0]])


def inducers_cross():
    return np.array([[1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.],
                     [1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.],
                     [1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.],
                     [0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.],
                     [0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.],
                     [0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., -1, -1, 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., -1, -1, 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., -1, -1, 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., -1, -1, 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., -1, -1, 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., -1, -1, 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., -1, -1, 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., -1, -1, 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., -1, -1, 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., -1, -1, 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.],
                     [0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.],
                     [0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.],
                     [1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.],
                     [1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.],
                     [1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.]])


def inducers_top_left_cross():
    return np.array(
        [[1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1],
         [1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1],
         [1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., -1],
         [0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., -1],
         [0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., -1],
         [0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., -1],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., -1],
         [0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., -1],
         [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., -1],
         [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., -1],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., -1],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., -1],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1]])


def inducers_down_left_cross():
    return np.array(
        [[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., -1],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., -1],
         [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., -1],
         [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., -1],
         [0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., -1],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., -1],
         [0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., -1],
         [0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., -1],
         [0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., -1],
         [1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., -1],
         [1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1],
         [1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1]])


def inducers_top_right_cross():
    return np.array(
        [[-1, 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.],
         [-1, 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.],
         [-1, 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.],
         [-1, 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.],
         [-1, 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.],
         [-1, 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.],
         [-1, 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [-1, 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.],
         [-1, 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
         [-1, 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
         [-1, 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [-1, 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [-1, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])


def inducers_down_right_cross():
    return np.array(
        [[-1, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [-1, 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [-1, 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [-1, 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
         [-1, 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
         [-1, 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.],
         [-1, 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [-1, 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.],
         [-1, 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.],
         [-1, 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.],
         [-1, 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.],
         [-1, 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.],
         [-1, 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.]])

def inducers_vert():
    return np.array(
        [[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]])


def inducers_vert_top_left_cross():
    return np.rot90(inducers_top_right_cross())


def inducers_vert_top_right_cross():
    return np.rot90(inducers_down_right_cross())


def inducers_vert_down_left_cross():
    return np.rot90(inducers_top_left_cross())


def inducers_vert_down_right_cross():
    return np.rot90(inducers_down_left_cross())


def all_shades():
    return np.array([
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., .1, .2, .3, .4, .5, .6, .7, .8, .9, 1., 0., 0., 0.],
         [0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., .1, 0., 0.],
         [0., 0., .9, 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., .2, 0., 0.],
         [0., 0., .8, 1., 1., 1., .8, .6, .4, .2, 1., 1., 1., .3, 0., 0.],
         [0., 0., .7, 1., 1., .2, 0., 0., 0., 0., .8, 1., 1., .4, 0., 0.],
         [0., 0., .6, 1., 1., .4, 0., 0., 0., 0., .6, 1., 1., .5, 0., 0.],
         [0., 0., .5, 1., 1., .6, 0., 0., 0., 0., .4, 1., 1., .6, 0., 0.],
         [0., 0., .4, 1., 1., .8, 0., 0., 0., 0., .2, 1., 1., .7, 0., 0.],
         [0., 0., .3, 1., 1., 1., .2, .4, .6, .8, 1., 1., 1., .8, 0., 0.],
         [0., 0., .2, 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., .9, 0., 0.],
         [0., 0., .1, 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
         [0., 0., 0., 1., .9, .8, .7, .6, .5, .4, .3, .2, .1, 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])


def two_bar_inducers():
    return np.array(
        [[0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0.],
         [0., 1., 1., 1., 1., 1., -1, -1, 1., 1., 1., 1., 1., 0.],
         [0., 1., 1., 1., 1., 1., -1, -1, 1., 1., 1., 1., 1., 0.],
         [0., 1., 1., 1., 1., 1., -1, -1, 1., 1., 1., 1., 1., 0.],
         [0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0.],
         [0., 1., 1., 1., 1., 1., -1, -1, 1., 1., 1., 1., 1., 0.],
         [0., 1., 1., 1., 1., 1., -1, -1, 1., 1., 1., 1., 1., 0.],
         [0., 1., 1., 1., 1., 1., -1, -1, 1., 1., 1., 1., 1., 0.],
         [0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0.]])


def two_half_bar_inducers():
    return np.array(
        [[0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0.],
         [0., 1., 1., 1., 1., 1., -1, -1, 0., 0., 0., 0., 0., 0.],
         [0., 1., 1., 1., 1., 1., -1, -1, 0., 0., 0., 0., 0., 0.],
         [0., 1., 1., 1., 1., 1., -1, -1, 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., -1, -1, 1., 1., 1., 1., 1., 0.],
         [0., 0., 0., 0., 0., 0., -1, -1, 1., 1., 1., 1., 1., 0.],
         [0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., 0.]])


def middle_square_3x3():
    return np.array([
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [0., 0., 0., 0., 0., .4, .4, .4, .4, .4, 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., .4, .4, .4, .4, .4, 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., .4, .4, .4, .4, .4, 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., .4, .4, .4, .4, .4, 0., 0., 0., 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]
    ])


def hori_line():
    return np.array(
        [[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
         [0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
         [0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
         [0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
         [0., .4, .4, .4, 1., 1., .4, .4, .4, .4, .4, 1., 1., 0., 0., 0., 0., 0., 1., 1., .4, .4, .4, 0.],
         [0., .4, .4, .4, 1., 1., .4, .4, .4, .4, .4, 1., 1., 0., 0., 0., 0., 0., 1., 1., .4, .4, .4, 0.],
         [0., .4, .4, .4, 1., 1., .4, .4, .4, .4, .4, 1., 1., .4, .4, .4, .4, .4, 1., 1., .4, .4, .4, 0.],
         [0., .4, .4, .4, 1., 1., .4, .4, .4, .4, .4, 1., 1., .4, .4, .4, .4, .4, 1., 1., .4, .4, .4, 0.],
         [0., .4, .4, .4, 1., 1., .4, .4, .4, .4, .4, 1., 1., .4, .4, .4, .4, .4, 1., 1., .4, .4, .4, 0.],
         [0., .4, .4, .4, 1., 1., .4, .4, .4, .4, .4, 1., 1., .4, .4, .4, .4, .4, 1., 1., .4, .4, .4, 0.],
         [0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., .4, .4, .4, .4, .4, 1., 1., 0., 0., 0., 0.],
         [0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., .4, .4, .4, .4, .4, 1., 1., 0., 0., 0., 0.],
         [0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
         [0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
         [0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]
         ])


def hori_line_big():
    return np.array([
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    ])

def segmented_hori_line():
    return np.array(
        [[0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0.],
         [0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0.],
         [1., 1., 1., 1., -1, -1, 1., 1., 1., 1., 1., -1, -1, 0., 0., 0., 0., 0., -1, -1, 1., 1., 1., 1.],
         [1., 1., 1., 1., -1, -1, 1., 1., 1., 1., 1., -1, -1, 0., 0., 0., 0., 0., -1, -1, 1., 1., 1., 1.],
         [1., 1., 1., 1., -1, -1, 1., 1., 1., 1., 1., -1, -1, 1., 1., 1., 1., 1., -1, -1, 1., 1., 1., 1.],
         [1., 1., 1., 1., -1, -1, 1., 1., 1., 1., 1., -1, -1, 1., 1., 1., 1., 1., -1, -1, 1., 1., 1., 1.],
         [1., 1., 1., 1., -1, -1, 1., 1., 1., 1., 1., -1, -1, 1., 1., 1., 1., 1., -1, -1, 1., 1., 1., 1.],
         [1., 1., 1., 1., -1, -1, 1., 1., 1., 1., 1., -1, -1, 1., 1., 1., 1., 1., -1, -1, 1., 1., 1., 1.],
         [0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., -1, -1, 1., 1., 1., 1., 1., -1, -1, 0., 0., 0., 0.],
         [0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., -1, -1, 1., 1., 1., 1., 1., -1, -1, 0., 0., 0., 0.],
         [0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0.],
         [0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0., 0., -1, -1, 0., 0., 0., 0.]])

def segmented_verti_line():
    return np.rot90(segmented_hori_line())


def segmented_triangle():
    return np.array(
        [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
         [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
         [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
         [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
         [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
         [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
         [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
         [0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
         [0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]])


def one_line():
    return np.array(
        [[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., .1, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., .5, .5, .5, .5, 1., 1., 1., .5, .5, .5, .5, 0.],
         [0., .5, .5, .5, .5, 1., 1., 1., .5, .5, .5, .5, 0.],
         [0., .5, .5, .5, .5, 1., 1., 1., .5, .5, .5, .5, 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])



def one_line_two_objects():
    return np.array(
        [[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., .1, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0.],
         [0., .5, .5, .5, .5, 1., 1., 1., .5, .5, .5, 0., 1., 0., 0.],
         [0., .5, .5, .5, .5, 1., 1., 1., .5, .5, .5, 0., 1., 0., 0.],
         [0., .5, .5, .5, .5, 1., 1., 1., .5, .5, .5, 0., 1., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])

def seg_one_line_two_object():
    return np.array(
        [[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., .1, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.],
         [0., .4, .4, .4, .4, 1., 1., 1., .4, .4, .4, 0., 1., 1., 1., 0., 0., 0.],
         [0., .4, .4, .4, .4, 1., 1., 1., .4, .4, .4, 0., 1., 1., 1., 0., 0., 0.],
         [0., .4, .4, .4, .4, 1., 1., 1., .4, .4, .4, 0., 1., 1., 1., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.],
         [0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])


def two_squares():
    return np.array(
        [[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., .1, .1, 0., 0.],
         [0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 1., 1., 1., 0., 0., .5, .5, .5, 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., .5, .5, .5, 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., .5, .5, .5, 0., 0.],
         [0., 0., .1, 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])


def two_bars_one_seg_line():
    return np.array([
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
        [0., .4, .4, .4, 1., 1., .4, .4, .4, .4, .4, .4, 1., 1., .4, .4, .4, 0.],
        [0., .4, .4, .4, 1., 1., .4, .4, .4, .4, .4, .4, 1., 1., .4, .4, .4, 0.],
        [0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],

    ])

def grossberg():
    return np.array([
         [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
         [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.],
         [0.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,0.,0.,0.],
         [0.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,0.,0.,0.],
         [0.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,.4,.4,.4,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,0.,0.,0.,0.,0.],
         [0.,0.,0.,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,.4,0.,0.,0.,0.,0.],
         [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
         [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
         [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
         [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
   ])


def two_seg():
    return np.array([
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., .4, .4, .4, .4, .4, 1., 1., 1., .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., .4, .4, .4, .4, .4, 1., 1., 1., .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., .4, .4, .4, .4, .4, 1., 1., 1., .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., .4, .4, .4, .4, .4, 1., 1., 1., .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., .4, .4, .4, .4, .4, 1., 1., 1., .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., .4, .4, .4, .4, .4, 1., 1., 1., .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]
    ])


def dancer():
    # input = plt.imread("../../img/dancer.jpg", format='jpeg')
    input = plt.imread("../../img/dancer_150.jpg", format='jpeg')
    # input = 255-input
    input[input <= 120] = 0
    input[input > 120] = 1
    input = 1 - input

    return input


def hori_square_150():
    data = plt.imread("../../img/hori_square_150.jpg", format='jpeg')
    # input = 255-input
    input = np.zeros((np.shape(data)[0], np.shape(data)[1]))

    input[data[:, :, 0] <= 110] = 0.0
    input[(data[:, :, 0] > 100) & (data[:, :, 0] <= 200)] = 0.4
    input[data[:, :, 0] > 200] = 1.0

    return input


def left_square_150():
    data = plt.imread("../../img/left_square_150.jpg", format='jpeg')
    # input = 255-input
    input = np.zeros((np.shape(data)[0], np.shape(data)[1]))

    input[data[:, :, 0] <= 110] = 0.0
    input[(data[:, :, 0] > 100) & (data[:, :, 0] <= 200)] = 0.4
    input[data[:, :, 0] > 200] = 1.0
    input[34, :] = 0

    return input


    # return np.array([
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]
    # ])

def bottom_square_150():
    return np.rot90(left_square_150(), k=3)


def left_triangle_150():
    data = plt.imread("../../img/left_triangle_150.jpg", format='jpeg')
    # input = 255-input
    input = np.zeros((np.shape(data)[0], np.shape(data)[1]))

    input[data[:, :, 0] <= 110] = 0.0
    input[(data[:, :, 0] > 100) & (data[:, :, 0] <= 200)] = 0.4
    input[data[:, :, 0] > 200] = 1.0

    return input
    #
    # return np.array([
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #     [0., 0., .4, 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, .4, 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, .4, 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, .4, 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, .4, 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, .4, 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, .4, 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., .4, 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]
    # ])


def bottom_triangle_150():
    return np.rot90(left_triangle_150(), k=3)


def top_triangle_150():
    return np.rot90(left_triangle_150(), k=1)


def corner_150():
    data = plt.imread("../../img/corner_150.jpg", format='jpeg')
    # input = 255-input
    input = np.zeros((np.shape(data)[0], np.shape(data)[1]))

    input[data[:, :, 0] <= 110] = 0.0
    input[(data[:, :, 0] > 100) & (data[:, :, 0] <= 200)] = 0.4
    input[data[:, :, 0] > 200] = 1.0

    input[19, :] = 0
    input[20:95, 56] = 1
    input[94, 56:131] = 1
    input[20:95, 131] = 1
    input[56:132, 18] = 0.4
    input[95:132, 93] = 0.4

    return input

    # return np.array([
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., .4, .4, .4, .4, .4, 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., .4, .4, .4, .4, .4, 1., 1., 1., 1., 0., 0.],
    #     [0., 0., 0., .4, .4, .4, .4, .4, .4, .4, 0., 0., 0., 0.],
    #     [0., 0., 0., .4, .4, .4, .4, .4, .4, .4, 0., 0., 0., 0.],
    #     [0., 0., 0., .4, .4, .4, .4, .4, .4, .4, 0., 0., 0., 0.],
    #     [0., 0., 0., .4, .4, .4, .4, .4, .4, .4, 0., 0., 0., 0.],
    #     [0., 0., 0., .4, .4, .4, .4, .4, .4, .4, 0., 0., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    #     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]
    # ])

def circle_150():
    data = plt.imread("../../img/circle_150.jpg", format='jpeg')
    # input = 255-input
    input = np.zeros((np.shape(data)[0], np.shape(data)[1]))

    input[data[:, :, 0] <= 80] = 0.0
    input[(data[:, :, 0] > 80) & (data[:, :, 0] <= 200)] = 0.4
    input[data[:, :, 0] > 200] = 1.0

    input[19, :] = 0
    input[20:95, 56] = 1
    input[94, 56:131] = 1
    input[20:95, 131] = 1

    return input

def left_square():
    return np.array([
        [0., 0., 0., 0., 0., 0., 0., 0., -1, -1],
        [0., 0., 0., 0., 0., 0., 0., 0., -1, -1],
        [0., 0., 1., 1., 1., 1., 1., 1., -1, -1],
        [0., 0., 1., 1., 1., 1., 1., 1., -1, -1],
        [0., 0., 1., 1., 1., 1., 1., 1., -1, -1],
        [0., 0., 1., 1., 1., 1., 1., 1., -1, -1],
        [0., 0., 1., 1., 1., 1., 1., 1., -1, -1],
        [0., 0., 1., 1., 1., 1., 1., 1., -1, -1],
        [0., 0., 0., 0., 0., 0., 0., 0., -1, -1],
        [0., 0., 0., 0., 0., 0., 0., 0., -1, -1]
    ])


def left_triangle():
    return np.array([
        [0., 0., 0., 0., 0., 0., 0., 0., -1, -1, -1, -1, -1],
        [0., 0., 0., 0., 0., 0., 0., 0., -1, -1, -1, -1, -1],
        [0., 0., 1., 0., 0., 0., 0., 0., -1, -1, -1, -1, -1],
        [0., 0., 1., 1., 0., 0., 0., 0., -1, -1, -1, -1, -1],
        [0., 0., 1., 1., 1., 0., 0., 0., -1, -1, -1, -1, -1],
        [0., 0., 1., 1., 1., 1., 0., 0., -1, -1, -1, -1, -1],
        [0., 0., 1., 1., 1., 1., 1., 0., -1, -1, -1, -1, -1],
        [0., 0., 1., 1., 1., 1., 1., 1., -1, -1, -1, -1, -1],
        [0., 0., 1., 1., 1., 1., 1., 1., -1, -1, -1, -1, -1],
        [0., 0., 1., 1., 1., 1., 1., 1., -1, -1, -1, -1, -1],
        [0., 0., 1., 1., 1., 1., 1., 1., -1, -1, -1, -1, -1],
        [0., 0., 1., 1., 1., 1., 1., 1., -1, -1, -1, -1, -1],
        [0., 0., 1., 1., 1., 1., 1., 1., -1, -1, -1, -1, -1],
        [0., 0., 1., 1., 1., 1., 1., 0., -1, -1, -1, -1, -1],
        [0., 0., 1., 1., 1., 1., 0., 0., -1, -1, -1, -1, -1],
        [0., 0., 1., 1., 1., 0., 0., 0., -1, -1, -1, -1, -1],
        [0., 0., 1., 1., 0., 0., 0., 0., -1, -1, -1, -1, -1],
        [0., 0., 1., 0., 0., 0., 0., 0., -1, -1, -1, -1, -1],
        [0., 0., 0., 0., 0., 0., 0., 0., -1, -1, -1, -1, -1],
        [0., 0., 0., 0., 0., 0., 0., 0., -1, -1, -1, -1, -1]
    ])

def top_left_corner():
    return np.array([
        [0., 0., 0., 0., 0., 0., 0., 0., -1, -1, -1, -1, -1, -1],
        [0., 0., 0., 0., 0., 0., 0., 0., -1, -1, -1, -1, -1, -1],
        [0., 0., 0., 0., 0., 0., 0., 0., -1, -1, -1, -1, -1, -1],
        [0., 0., 0., 1., 1., 1., 1., 1., -1, -1, -1, -1, -1, -1],
        [0., 0., 0., 1., 1., 1., 1., 1., -1, -1, -1, -1, -1, -1],
        [0., 0., 0., 1., 1., 1., 1., 1., -1, -1, -1, -1, -1, -1],
        [0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0.],
        [0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0.],
        [0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0.],
        [0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0.],
        [0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]
    ])


def bottom_square():
    return np.rot90(left_square())


def test_mnist():
    return np.array([
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]
    ])

def mnist_test():
    return np.array([
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., .5, .5, 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., .5, .5, 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., .5, .5, .5, 0., 0., 0., 0., 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [0., 0., 0., 0., 0., 0., .5, .5, .5, .5, 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., .5, .5, .5, 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., .5, .5, .5, 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., .5, .5, .5, .5, 0., 0., 0., 0., 0., 0., 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [0., 0., 0., 0., 0., .5, .5, .5, .5, 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., .5, .5, .5, .5, 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., .5, .5, .5, .5, 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., .5, .5, .5, .5, 0., 0., 0., 0., 0., 0., 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
    ])

def mnist_test2():
    return np.array([
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., .5, .5, .5, .5, .5, 0., 0., 0., 0., .5, .5, .5, 0., 0., 0.],
        [0., 0., .5, .5, .5, .5, 0., 0., 0., 0., .5, .5, .5, .5, 0., 0., 0.],
        [0., 0., .5, .5, .5, 0., 0., 0., 0., 0., .5, .5, .5, .5, 0., 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [0., 0., .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, 0., 0., 0.],
        [0., 0., .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, 0., 0., 0.],
        [0., 0., 0., 0., .5, .5, .5, .5, .5, .5, .5, .5, 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
    ])


def mnist_test3():
    return np.rot90(mnist_test2(), k=2)


def mnist_test4():
    return np.array([
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [0., 0., 0., 0., 0., 0., 0., .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., 0., 0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., .4, .4, .4, .4, .4, .4, .4, 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., .4, .4, .4, .4, .4, .4, .4, 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
    ])


def mnist_test5():
    return np.array([
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., .4, .4, 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., .4, .4, 0., 0., 0.],
        [0., 0., 0., 0., 0., .4, .4, .4, 0., 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [0., 0., 0., .4, .4, .4, 0., 0., 0., 0., 0.],
        [0., 0., .4, .4, .4, 0., 0., 0., 0., 0., 0.],
        [0., 0., .4, .4, .4, 0., 0., 0., 0., 0., 0.],
        [0., 0., .4, .4, .4, .4, 0., 0., 0., 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]
    ])


def mnist_test6():
    return np.array([
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [0., 0., 0., 0., 0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0., 0.],
        [0., 0., 0., 0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0., 0.],
        [0., 0., 0., 0., .4, .4, .4, .4, .4, .4, 0., .4, .4, .4, .4, 0., 0., 0.],
        [0., 0., 0., 0., .4, .4, .4, .4, 0., 0., 0., 0., .0, 0., 0., 0., 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    ])


def mnist_test7():
    return np.array([
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., .4, .4, .4, .4, 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., .0, .4, .4, .4, .4, 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., .4, .4, .4, .4, 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., .4, .4, .4, .4, 0., 0., 0., 0., 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [0., 0., 0., 0., .4, .4, .4, .4, .4, 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., .4, .4, .4, .4, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., .4, .4, .4, .4, .4, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., .4, .4, .4, .4, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    ])


def mnist_test8():
    return np.array([
        [0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., .4, .4, .4, .4, .4, 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1.],
    ])


def mnist_test9():
    return np.array([
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., .4, .4, .4, .4, 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., .4, .4, .4, .4, 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., .4, .4, .4, .4, 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., .4, .4, .4, 0., 0., 0., 0., 0., 0., 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]
    ])


def mnist_test10():
    return np.array([
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0.],
        [0., 0., 0., .4, .4, .4, .4, .4, .4, .4, .4, .4, 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., .4, .4, .4, .4, .4, .4, .4, 0., 0., 0., 0., 0.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]
    ])
